1. create backend and frontend folder
2. In frontend, npm create vite@latest
3. Now for backend, initialize npm init -y at root diectory for hosting purpose
4. npm i express dotenv cookie-parser bcryptjs mongoose socket.io jsonwebtoken
5. npm i nodemon --save-dev
6. create server.js in backend and change script in package.json to "nodemon backend/server.js"
7. run npm run server
8. create .env file and change PORT and import dotenv in server.js
 change "type": "module" and use import instead of const req
 create routes/authRoutes.js and imported it in server, create signup,login,logout
 create function of login,logout in controller and import it in authRoutes
 create db/connectMongoDB.js and imported it in server.js
 Create models/userModel.js in backend
 complete signup function in authController
 Create utils/generateToken.js in backend
 Create secret key for jwt in.env file using "openssl rand -base64 32" in git bash
 ctrl+shift+p then search reload window- agr vscode hang ho rha to reload kro
 complete  generateTokenAndSetCookies function and import it in authController signup funtion
 complete login function
 complete logout function
 Create MessageModel and ConversationModel in backend
 Create messageController function,import it new messageRoutes, then import messageRoutes in server.js
 Import cookieparser in server, and complete middleware/protectRoute.js, use middleware in both messageRoutes and userRoutes
 middleware used for verification, mainly it sets the value req.user = user from the token
 create usercontroller and import in userRoutes

 backend complete
 .
 .
 .
 frontend process:
 now create npm create vite@latest
 install tailwind css (tailwindcss vite install gsearch)
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p 
change config.js and index.css in src
explore https://daisyui.com/ : The most popular component library for Tailwind CSS
 Install daisyUI : npm i -D daisyui@latest
 add plugin in config.js   plugins: [ require('daisyui'),]
 delete app.css
 create pages and component folder in src
 create home login signup folder in pages and jsx file respectively
 create public folder and inser bg
 now import background in index.css
 check tailwindcss glass morphism to blur bg
 create login page
 create signup page with GenderCheckBox.jsx
 create sidebar folder along with jsx in component
 import sidebar in home.jsx
 create searchInput.jsx
 import it in sidebar then import sidebar in home and home in app
 install react icons from https://react-icons.github.io/react-icons/  and run npm install react-icons --save
 import searchicon in searchInput
 create Conversation.jsx in sidebar
 create logout btn sidebar
 create messages folder then MessageContainer,Messages, Message and Message input 
 update index.css for scrollbar
 complete UI Design

 Functionality Add:
 npm i react-router-dom
 ctrl+shift+p to reload vs code
 Wrap tha app compo in browserrouter
 make the route and routes for home,login.signup
 change port to 3000 in vite.config
 <Link to={'/login'} in signup page to change page and same in login page
 complete handlesubmit function in signup
 make hooks folder for hooks
 npm i react-hot-toast for toasting message and add hook to verify input data(Gsearch)
 add <Toaster/> in app (Make sure it's placed at the top)
 complete signup function in hooks
 Create context folder and authcontext so that we can use some props over the project
 Wrap app in <AuthContextProvider>
 set localstorage for chat-user
 now in app, if authuser exist navigation to home and else to login
 create useLogout hook and import it in logoutbtn

 In login page make handlesubmit function and create uselogin hook
 complete uselogin hook and login page, after verification of data page must be redirected to home

 now part of getconversation, use zustand,provide the global state that we can use throughout the project
 npm install zustand
 create zustand folder and useConversation.js
 cretae useGetConversations.js hook
 update Conversations.jsx sidebar
 create utils/emojis.js for emoji
 update Conversation.jsx sidebar
 update MessageContainer for selected chat and logged user
 create useSendMessage.js hook and import it in MessageInput
 create useGetMessage.js hook and import it in Messages
 create messageSkeleton to show it while loading
 update messages.jsx
create extractTime.js in utils and import in message
update messages.jsx to shift scrobar to recent msg
update searchInput to search user and shift the chat respectively

now we able to send, receive and store msg in db but at a same time msg not updated at receiver we have to refresh page
thats why we will use socket
now create socket server at the top of express server in backend
create socket folder and socket.js
update server.js 

now in frontend too, create socketContext.js in context folder
wrap app in socketcontext in main.jsx
npm i socket.io-client
update server and socket and context
import socketContext in sidebar to get online users
update messageController to maintain the updates for live messaging
it is used to send event
now create useListenMessages.js to listen events of live msg
add notification sound in assest frontend and import it in useListenMessages()
and import useListenMessages in messages.jsx
